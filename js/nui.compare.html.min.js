/**
 * NUI HTML Compare Tool
 * Copyright 2018 NUI HTML Compare Tool Author.
 *
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NUI = { CompareTool: function (arguments) { this.NUI_ADDED_CSS = "added", this.NUI_DELETED_CSS = "deleted"; var t = function (t, e) { t.addClass(this.NUI_ADDED_CSS).appendTo(e) }, e = function (t, e) { t.addClass(this.NUI_DELETED_CSS).appendTo(e) }, n = function (t) { return "<" + t + "></" + t + ">" }, i = function (o, s, l, p) { for (var r = o.length > s.length ? o.length : s.length, d = 0; d < r; d++) { if (o[d] && s[d] && $(o[d])[0].tagName && $(s[d])[0].tagName && $(o[d])[0].tagName === $(s[d])[0].tagName) p = p ? $(n($(o[d])[0].tagName)).appendTo(p) : $(n($(o[d])[0].tagName)).appendTo(l), i($.parseHTML($(o[d]).html()), $.parseHTML($(s[d]).html()), p, p); else if (o[d] && s[d] && $(o[d])[0].tagName && $(s[d])[0].tagName && $(o[d])[0].tagName !== $(s[d])[0].tagName) p ? (e($(o[d]), p), t($(s[d]), p)) : (e($(o[d]), l), t($(s[d]), l)); else if (void 0 === s[d]) e($(o[d]), p || l); else { if (void 0 !== o[d]) { p ? p.append(a(o[d], s[d])) : l.append(a(o[d], s[d])); continue } t($(s[d]), p || l) } p = void 0 } }, a = function (t, e) { var n = void 0 === t ? "" : t.data, i = void 0 === e ? "" : e.data, a = ""; return void 0 !== n && 0 === n.trim().length && void 0 !== i && 0 === i.trim().length ? t : (n = n.trim().replace(/\s/g, "&nbsp;"), 0 !== (i = i.trim().replace(/\s/g, "&nbsp;")).trim().length || 0 !== n.trim().length ? a = o(n.split("&nbsp;"), i.split("&nbsp;")) : 0 === i.trim().length && (a = a + '<span class="deleted">' + n + "</span>"), a) }, o = function (t, e) { for (var n = "", i = "", a = "", o = "", r = 0, d = 0, h = "", m = ""; void 0 !== t[r] || void 0 !== e[d];)if (m = s(t, r), h = l(e, d), t[r] && e[d] && t[r].trim() === e[d].trim()) o = p(o, n, i, a, !0, !0, !1), a += m, n = "", i = "", r++ , d++; else if (void 0 !== e[d]) if (void 0 !== t[r]) { if (void 0 !== t[r] && void 0 !== e[d] && t[r] !== e[d]) { o = p(o, n, i, a, !1, !1, !0), a = ""; for (; void 0 !== t[r];)if (0 !== t[r].length) { var g = e.indexOf(t[r]); if (g > d) { for (var u = d; u < g; u++)n += h, h = l(e, d); d = g; break } if (t[r] === e[d]) break; i += m, m = s(t, ++r) } else i += m, m = s(t, ++r); r-- , d-- } r++ , d++ } else o = p(o, n, i, a, !1, !0, !0), n += h, i = "", a = "", r++ , d++; else o = p(o, n, i, a, !0, !1, !0), i += m, n = "", a = "", r++ , d++; return o = p(o, n, i, a, !0, !0, !0), n = "", i = "", a = "", o }, s = function (t, e) { return e === t.length - 1 ? "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] : "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] + "&nbsp;" }, l = function (t, e) { return t.length, "" === t[e] ? "&nbsp;" : void 0 === t[e] ? void 0 : t[e] + "&nbsp;" }, p = function (t, e, n, i, a, o, s) { return o && n.length > 0 && (t = t + '<span class="deleted">' + n + "</span>"), a && e.length > 0 && (t = t + '<span class="added">' + e + "</span>"), s && i.length > 0 && (t = t + '<span class="nochange">' + i + "</span>"), t }; arguments && "object" == typeof arguments && (this.options = function (t, e) { var n; for (n in e) e.hasOwnProperty(n) && (t[n] = e[n]); return t }({ oldHtml: null, newHtml: null, target: null }, arguments)), this.options.outputHtml = null, this.options.defaulTarget = '<div class="compare-html-tag" style="display:none;"></div>', this.clear = function () { this.options.target && $(this.options.target).empty() }, this.compare = function () { var t = null; return this.options.target ? ((t = $(this.options.target)).addClass("compare-html-tag"), this.clear()) : (t = $(this.options.defaulTarget).appendTo(document.body)).empty(), i($.parseHTML(this.options.oldHtml, !1), $.parseHTML(this.options.newHtml, !1), t, null), this.options.outputHtml = $(t).html(), this.options.target || $(t).remove(), this.options.outputHtml } } };
